---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
  name: git
spec:
  ingressClassName: nginx
  rules:
    - host: git.localhost
      http:
        paths:
          - backend:
              service:
                name: git
                port:
                  number: 80
            path: /
            pathType: Prefix

---
apiVersion: v1
kind: Service
metadata:
  labels:
    run: git
  name: git
spec:
  ports:
    - port: 80
      protocol: TCP
  selector:
    app: git

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: git
  name: git
spec:
  replicas: 1
  selector:
    matchLabels:
      app: git
  serviceName: git
  template:
    metadata:
      labels:
        app: git
    spec:
      containers:
        - image: registry.localhost/git:latest
          name: git
          ports:
            - containerPort: 80
              name: web
              protocol: TCP
          volumeMounts:
            - mountPath: /var/www/htdocs/git
              name: git
      volumes:
        - emptyDir: {}
          name: git

---
apiVersion: batch/v1
kind: Job
metadata:
  name: git-image-build
spec:
  ttlSecondsAfterFinished: 120
  backoffLimit: 1
  template:
    spec:
      containers:
        - args:
            - "--context=/build"
            - "--destination=registry.default.svc/git:latest"
            - "--insecure"
          image: gcr.io/kaniko-project/executor:latest
          name: kaniko
          volumeMounts:
            - mountPath: /build
              name: build-context
      initContainers:
        - args:
            - "-c"
            - sleep 3 && cp -aL /build-src/* /build/
          command:
            - /bin/sh
          image: busybox
          name: init
          volumeMounts:
            - mountPath: /build
              name: build-context
            - mountPath: /build-src
              name: build-context-src
      restartPolicy: Never
      volumes:
        - configMap:
            name: git-build-image-context
          name: build-context-src
        - emptyDir: {}
          name: build-context

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: git-build-image-context
data:
  Dockerfile: |
    FROM nginx:alpine

    ENV FCGI_SOCKET=/var/run/fcgiwrap.sock
    ENV FCGI_PROGRAM=/usr/sbin/fcgiwrap
    ENV FCGI_USER=nginx
    ENV FCGI_GROUP=www-data
    ENV FCGI_EXTRA_OPTIONS="-M 0700"
    ENV ALLOWED_ENV="PATH"

    RUN apk add git-daemon fcgiwrap spawn-fcgi

    RUN mkdir -p /var/www/htdocs/git \
        && chmod 700 /var/www/htdocs/git \
        && chown nginx:www-data /var/www/htdocs/git

    COPY spawn-fcgi.sh /docker-entrypoint.d/spawn-fcgi.sh
    RUN chmod 770 /docker-entrypoint.d/spawn-fcgi.sh

    COPY git-init.sh /usr/local/bin/git-init
    RUN chmod 755 /usr/local/bin/git-init

    COPY nginx.conf /etc/nginx/conf.d/default.conf

    WORKDIR /var/www/htdocs/git

  git-init.sh: |
    #!/bin/sh
    for repo in ${@:?}; do
        dir="/var/www/htdocs/git/${repo}.git"
        git -C "$(dirname "$dir")" init --bare --shared --initial-branch=main "${repo}.git"
        git -C "$dir" config --bool http.receivepack true
        git -C "$dir" config --bool receive.denyNonFastforwards false
        chown -R nginx:www-data "$dir"
    done

  nginx.conf: |
    server {
        listen       80;
        server_name  _;

        location / {
            try_files $uri $uri/ =404;
        }

        location ~ (/.*) {
            client_max_body_size 0;
            include /etc/nginx/fastcgi_params;
            fastcgi_param SCRIPT_FILENAME /usr/libexec/git-core/git-http-backend;
            fastcgi_param GIT_HTTP_EXPORT_ALL "";
            fastcgi_param GIT_PROJECT_ROOT /var/www/htdocs/git;
            fastcgi_param REMOTE_USER $remote_user;
            fastcgi_param PATH_INFO $1;
            fastcgi_pass unix:/var/run/fcgiwrap.socket;
        }
    }

  spawn-fcgi.sh: |
    #!/bin/sh
    spawn-fcgi -s /var/run/fcgiwrap.socket -M 0700 -u nginx -g www-data /usr/bin/fcgiwrap
